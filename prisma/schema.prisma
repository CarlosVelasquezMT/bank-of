generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("USER") // "ADMIN" or "USER"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con Account si es usuario
  account Account?

  @@map("users")
}

model Account {
  id            String   @id @default(cuid())
  accountNumber String   @unique
  fullName      String
  email         String   @unique
  balance       Decimal  @default(0) @db.Decimal(12, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relación con User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relaciones
  movements         Movement[]
  credits           Credit[]
  loans             Loan[]
  sentTransfers     Transfer[] @relation("SentTransfers")
  receivedTransfers Transfer[] @relation("ReceivedTransfers")
  recharges         Recharge[]
  payments          Payment[]
  certificates      Certificate[]
  withdrawals       Withdrawal[]

  @@map("accounts")
}

model Movement {
  id          String   @id @default(cuid())
  type        String   // "DEPOSIT", "WITHDRAWAL", "TRANSFER_IN", "TRANSFER_OUT", "PAYMENT", "RECHARGE", "CREDIT", "LOAN"
  amount      Decimal  @db.Decimal(12, 2)
  description String
  reference   String?
  createdAt   DateTime @default(now())

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId, createdAt])
  @@map("movements")
}

model Credit {
  id           String   @id @default(cuid())
  amount       Decimal  @db.Decimal(12, 2)
  limit        Decimal  @db.Decimal(12, 2)
  interestRate Decimal  @db.Decimal(5, 2)
  status       String   @default("ACTIVE") // "ACTIVE", "SUSPENDED", "CLOSED"
  dueDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model Loan {
  id             String   @id @default(cuid())
  amount         Decimal  @db.Decimal(12, 2)
  remaining      Decimal  @db.Decimal(12, 2)
  interestRate   Decimal  @db.Decimal(5, 2)
  monthlyPayment Decimal  @db.Decimal(12, 2)
  term           Int
  status         String   @default("ACTIVE") // "ACTIVE", "PAID", "DEFAULTED"
  startDate      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model Transfer {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(12, 2)
  description String?
  reference   String   @unique
  status      String   @default("COMPLETED") // "PENDING", "COMPLETED", "FAILED"
  createdAt   DateTime @default(now())

  fromAccountId String
  toAccountId   String
  fromAccount   Account @relation("SentTransfers", fields: [fromAccountId], references: [id])
  toAccount     Account @relation("ReceivedTransfers", fields: [toAccountId], references: [id])

  @@index([fromAccountId])
  @@index([toAccountId])
  @@map("transfers")
}

model Recharge {
  id          String   @id @default(cuid())
  phoneNumber String
  operator    String
  amount      Decimal  @db.Decimal(12, 2)
  reference   String   @unique
  status      String   @default("COMPLETED")
  createdAt   DateTime @default(now())

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("recharges")
}

model Payment {
  id          String   @id @default(cuid())
  type        String   // "UTILITY", "CREDIT_CARD", "SERVICE"
  service     String
  amount      Decimal  @db.Decimal(12, 2)
  reference   String   @unique
  billNumber  String?
  status      String   @default("COMPLETED")
  createdAt   DateTime @default(now())

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Certificate {
  id        String   @id @default(cuid())
  type      String   // "ACCOUNT_STATEMENT", "INCOME_CERTIFICATE", "BALANCE_CERTIFICATE", "TRANSACTION_HISTORY"
  status    String   @default("PENDING") // "PENDING", "APPROVED", "REJECTED", "COMPLETED"
  email     String
  purpose   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Withdrawal {
  id        String   @id @default(cuid())
  amount    Decimal  @db.Decimal(12, 2)
  code      String   @unique
  method    String
  status    String   @default("PENDING") // "PENDING", "COMPLETED", "EXPIRED"
  expiresAt DateTime
  createdAt DateTime @default(now())

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("withdrawals")
}

model BankConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("bank_config")
}
